name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker image
      run: docker build -t crud-api:'${{github.sha}}' .

    - name: Log in to Docker Hub
      run: docker login -u ${{ secrets.SECRET_USERNAME}} -p ${{ secrets.SECRET_PASS}}

    - name: tag docker image
      run: docker tag crud-api:'${{github.sha}}' '${{ secrets.SECRET_USERNAME }}'/crud-api:'${{github.sha}}'

    - name: Push Docker image
      run: docker push '${{ secrets.SECRET_USERNAME }}'/crud-api:'${{github.sha}}'

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform init
      run: terraform init

    - name: Terraform apply
      run: terraform apply -auto-approve -var "aks_cluster_name=pythondeploy12" -var "resource_group=1-9129f6fb-playground-sandbox" -var "AZURE_CLIENT_ID=28f610e9-d32d-46e7-9728-1e2ccb4be7cb" -var "AZURE_CLIENT_SECRET=PNk8Q~.W5.1IzzNOE_55C.qAZFZs5jeMAabHcaQc"
      env:
        AZURE_CREDENTIALS: ${{ secrets.SECRET_AZURE_CRE }}

    - name: Connect to AKS
      uses: andersbea/connect-to-aks@v1.0.0
      with:
        CREDENTIALS: '${{ secrets.SECRET_AZURE_CRE }}'
        RESOURCE_GROUP: 1-d2d2de45-playground-sandbox
        CLUSTER: pythondeploy
    - name: Deploy to AKS
      env:
        AZURE_CREDENTIALS: ${{ secrets.SECRET_AZURE_CRE }}
      run: |
        curl -LO https://aka.ms/InstallAzureCLIDeb
        sudo bash InstallAzureCLIDeb
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
